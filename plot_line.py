"""
PlotLine Implementation

This module implements a PlotLine class to represent individual plot lines
generated by AI based on story configuration.
"""

from typing import List, Dict, Any
import json
import re


class PlotLine:
    """Represents a single plot line with name and description."""
    
    def __init__(self, name: str, plotline: str):
        """
        Initialize a plot line.
        
        Args:
            name: Short name/title for the plot line
            plotline: Detailed description of the plot line
        """
        self.name = name.strip()
        self.plotline = plotline.strip()
    
    def __str__(self) -> str:
        """String representation of the plot line."""
        return f"{self.name}: {self.plotline[:100]}..." if len(self.plotline) > 100 else f"{self.name}: {self.plotline}"
    
    def to_dict(self) -> Dict[str, str]:
        """Convert to dictionary representation."""
        return {
            'name': self.name,
            'plotline': self.plotline
        }


def parse_plot_lines_from_ai_response(ai_response: str) -> List[PlotLine]:
    """
    Parse plot lines from AI response containing structured data.
    
    The AI response should contain a JSON block with the format:
    <STRUCTURED_DATA>
    {
      "plotlines": [
        {
          "name": "Plot name",
          "plotline": "Plot description"
        },
        ...
      ]
    }
    </STRUCTURED_DATA>
    
    Args:
        ai_response: The full AI response text
        
    Returns:
        List of PlotLine objects parsed from the response
    """
    plot_lines = []
    
    try:
        # Extract the structured data section
        pattern = r'<STRUCTURED_DATA>\s*({.*?})\s*</STRUCTURED_DATA>'
        match = re.search(pattern, ai_response, re.DOTALL)
        
        if not match:
            # Try without the tags in case AI doesn't include them
            # Look for JSON-like structure
            json_pattern = r'{\s*"plotlines"\s*:\s*\[.*?\]\s*}'
            match = re.search(json_pattern, ai_response, re.DOTALL)
            if match:
                json_str = match.group(0)
            else:
                return plot_lines
        else:
            json_str = match.group(1)
        
        # Parse the JSON
        data = json.loads(json_str)
        
        # Extract plot lines
        if 'plotlines' in data and isinstance(data['plotlines'], list):
            for item in data['plotlines']:
                if isinstance(item, dict) and 'name' in item and 'plotline' in item:
                    plot_line = PlotLine(
                        name=item['name'],
                        plotline=item['plotline']
                    )
                    plot_lines.append(plot_line)
    
    except (json.JSONDecodeError, KeyError, AttributeError) as e:
        # If parsing fails, return empty list
        # In a production environment, you might want to log this error
        pass
    
    return plot_lines