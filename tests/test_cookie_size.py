#!/usr/bin/env python3
"""
Test cookie size reduction for session data.

This test verifies that the session cookie size is reduced to prevent
the "cookie too large" warning while maintaining all functionality.
"""

import unittest
import tempfile
import os
import json
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from objects.story import Story
from objects.archetype import ArchetypeEnum
from objects.story_types import StoryTypeRegistry
from objects.genre import GenreRegistry
from objects.archetype import ArchetypeRegistry
from objects.style import StyleRegistry


class TestCookieSize(unittest.TestCase):
    """Test that session cookies are kept within reasonable size limits."""

    def setUp(self):
        """Set up test client and registries."""
        self.app = app
        self.app.config['TESTING'] = True
        self.client = self.app.test_client()
        
        # Initialize registries
        self.story_registry = StoryTypeRegistry()
        self.genre_registry = GenreRegistry()
        self.archetype_registry = ArchetypeRegistry()
        self.style_registry = StyleRegistry()

    def test_minimal_session_data_structure(self):
        """Test that session data contains only minimal information for templates."""
        with self.client.session_transaction() as sess:
            # Set up story data directly like the existing tests do
            sess.clear()
            sess['story_data'] = {
                'story_type_name': 'The Quest',
                'subtype_name': 'Hero Quest',
                'key_theme': 'Good vs Evil',
                'core_arc': 'Hero Overcomes Evil',
                'genre_name': 'Fantasy',
                'sub_genre_name': 'High Fantasy',
                'writing_style_name': 'Epic',
                'protagonist_archetype': 'Chosen One',
                'secondary_archetypes': ['Wise Mentor']
            }
        
        # Check session data structure
        with self.client.session_transaction() as sess:
            story_data = sess.get('story_data', {})
            
            # Verify minimal fields are present
            self.assertIn('story_type_name', story_data)
            self.assertIn('subtype_name', story_data)
            self.assertEqual(story_data['story_type_name'], 'The Quest')
            self.assertEqual(story_data['subtype_name'], 'Hero Quest')
            
            # Verify large data fields are NOT in session when using the minimal approach
            self.assertNotIn('characters', story_data)
            self.assertNotIn('chapters', story_data)
            self.assertNotIn('selected_plot_line', story_data)
            self.assertNotIn('expanded_plot_line', story_data)

    def test_session_cookie_size_reduction(self):
        """Test that session cookie size is significantly reduced compared to full story data."""
        
        # Test 1: Simulate what the old approach would store (full story data with realistic sizes)
        full_story_data = {
            'story_type_name': 'The Quest',
            'subtype_name': 'Hero Quest',
            'key_theme': 'Good vs Evil',
            'core_arc': 'Hero Overcomes Evil',
            'genre_name': 'Fantasy',
            'sub_genre_name': 'High Fantasy',
            'writing_style_name': 'Epic',
            'protagonist_archetype': 'Chosen One',
            'secondary_archetypes': ['Wise Mentor', 'Loyal Companion'],
            'selected_plot_line': {
                'name': 'Epic Quest for the Magic Artifact',
                'plotline': 'A detailed plot line description that goes on for several sentences with character motivations, conflicts, and resolution paths that would typically be quite lengthy in a real application scenario.' * 3
            },
            'expanded_plot_line': 'This is an expanded plot line that contains even more detailed information about the story, character interactions, plot developments, and narrative arcs that would be generated by AI and could easily contain hundreds or thousands of characters of text content.' * 5,
            'characters': [
                {
                    'name': 'Hero McHeroface',
                    'archetype': 'Chosen One',
                    'functional_role': 'Protagonist',
                    'emotional_function': 'Sympathetic Character',
                    'backstory': 'A detailed backstory that explains the character\'s origins, motivations, past experiences, and psychological makeup that forms their personality and drives their actions throughout the story narrative. ' * 3,
                    'character_arc': 'A comprehensive character development arc that describes how the character changes and grows throughout the story, their internal conflicts, external challenges, and ultimate transformation. ' * 3
                } for _ in range(5)  # Multiple characters
            ],
            'chapters': [
                {
                    'chapter_number': i,
                    'title': f'Chapter {i}',
                    'overview': 'Chapter overview with detailed plot points' * 10,
                    'character_impact': [{'character': 'Hero', 'effect': 'Introduction to the world'} for _ in range(3)],
                    'point_of_view': 'Hero McHeroface',
                    'narrative_function': 'Setting Introduction',
                    'foreshadow_or_echo': 'Sets up the main conflict',
                    'scene_highlights': 'Dramatic opening scene with action and dialogue' * 5,
                    'summary': 'Summary of what happened in this chapter' * 10,
                    'chapter_text': 'This would be approximately 1000 words of actual prose text for the chapter, which would be quite large when stored in a session cookie. This is just a placeholder to simulate the size that actual chapter text would consume in the session data structure. ' * 20
                } for i in range(1, 6)  # 5 chapters
            ]
        }
        
        # Test 2: Our new minimal approach
        minimal_story_data = {
            'story_type_name': 'The Quest',
            'subtype_name': 'Hero Quest',
            'key_theme': 'Good vs Evil',
            'core_arc': 'Hero Overcomes Evil',
            'genre_name': 'Fantasy',
            'sub_genre_name': 'High Fantasy',
            'writing_style_name': 'Epic',
            'protagonist_archetype': 'Chosen One',
            'secondary_archetypes': ['Wise Mentor', 'Loyal Companion']
        }
        
        # Calculate sizes
        full_size = len(json.dumps(full_story_data).encode('utf-8'))
        minimal_size = len(json.dumps(minimal_story_data).encode('utf-8'))
        
        # The full data should be much larger than cookie limits
        self.assertGreater(full_size, 4093, "Full story data should exceed cookie size limit")
        
        # The minimal data should be well under the limit
        self.assertLess(minimal_size, 1000, f"Minimal data size ({minimal_size} bytes) should be much smaller")
        
        # The minimal data should be significantly smaller than full data
        reduction_ratio = minimal_size / full_size
        self.assertLess(reduction_ratio, 0.1, f"Minimal data should be less than 10% of full data size (actual: {reduction_ratio:.2%})")
        
        print(f"Full story data size: {full_size} bytes")
        print(f"Minimal story data size: {minimal_size} bytes") 
        print(f"Size reduction: {(1-reduction_ratio):.1%}")

    def test_secondary_archetypes_in_minimal_session(self):
        """Test that secondary archetypes are included in minimal session data."""
        with self.client.session_transaction() as sess:
            sess.clear()
            # Set up session data with secondary archetypes as our new approach does
            sess['story_data'] = {
                'story_type_name': 'The Quest',
                'subtype_name': 'Hero Quest',
                'key_theme': 'Good vs Evil',
                'core_arc': 'Hero Overcomes Evil',
                'genre_name': 'Fantasy',
                'sub_genre_name': 'High Fantasy',
                'writing_style_name': 'Epic',
                'protagonist_archetype': 'Chosen One',
                'secondary_archetypes': ['Wise Mentor', 'Loyal Companion']
            }
        
        # Check session data
        with self.client.session_transaction() as sess:
            story_data = sess.get('story_data', {})
            
            # Verify secondary archetypes are included
            self.assertIn('secondary_archetypes', story_data)
            secondary_archetypes = story_data.get('secondary_archetypes', [])
            self.assertIn('Wise Mentor', secondary_archetypes)
            self.assertIn('Loyal Companion', secondary_archetypes)
            
            # Verify total size is still reasonable
            session_json = json.dumps(story_data)
            session_size = len(session_json.encode('utf-8'))
            self.assertLess(session_size, 1000)

    def test_template_compatibility(self):
        """Test that templates can still access the required data from session."""
        with self.client.session_transaction() as sess:
            sess.clear()
            # Set minimal session data as our new approach does
            sess['story_data'] = {
                'story_type_name': 'The Quest',
                'subtype_name': 'Hero Quest',
                'key_theme': 'Good vs Evil',
                'core_arc': 'Hero Overcomes Evil'
            }
        
        # Get a page that uses the left panel template data
        response = self.client.get('/key-theme-selection')
        self.assertEqual(response.status_code, 200)
        
        # Check that the response contains the expected story data
        response_data = response.get_data(as_text=True)
        self.assertIn('The Quest', response_data)
        self.assertIn('Hero Quest', response_data)


if __name__ == '__main__':
    unittest.main()